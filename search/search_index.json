{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Botright! For full documentation of changes visit BotrightDocumentation . Except of these changes, you can use Botright after the PlaywrightDocs Installation Pip pip install --upgrade pip pip install botright playwright install Usage Once installed, you can import Botright in a Python script, and launch a firefox browser. import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() await page.goto(\"http://playwright.dev\") print(await page.title()) await botright_client.close() if __name__ == \"__main__\": asyncio.run(main()) First script In our first script, we will navigate to whatsmyuseragent.org and take a screenshot in WebKit. import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() page.goto(\"http://whatsmyuseragent.org/\") page.screenshot(path=\"example.png\") await botright_client.close() if __name__ == \"__main__\": asyncio.run(main()) By default, Botright runs the browsers in headless mode. To see the browser UI, pass the headless=False flag while launching botright/the browser. await botright.Botright(headless=False) Interactive mode (REPL) You can launch the interactive python REPL: python -m asyncio and then launch Botright within it for quick experimentation: >>> import botright >>> botright_client = await botright.Botright() # Pass headless=False to botright.Botright() to see the browser UI >>> browser = await botright_client.new_browser() >>> page = await browser.new_page() >>> await page.goto(\"http://whatsmyuseragent.org/\") >>> await page.screenshot(path=\"example.png\") >>> await botright_client.stop() Pyinstaller You can use Botright with Pyinstaller to create standalone executables. # main.py import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() page.goto(\"http://whatsmyuseragent.org/\") page.screenshot(path=\"example.png\") await botright_client.close() if __name__ == \"__main__\": asyncio.run(main()) If you want to bundle browsers with the executables: PLAYWRIGHT_BROWSERS_PATH=0 playwright install firefox pyinstaller -F main.py set PLAYWRIGHT_BROWSERS_PATH=0 playwright install firefox pyinstaller -F main.py $env:PLAYWRIGHT_BROWSERS_PATH=\"0\" playwright install firefox pyinstaller -F main.py Known issues Threading Botright's API is not thread-safe. If you are using Botright in a multi-threaded environment, you should create a botright instance per thread. See threading issue for more details.","title":"Welcome to Botright!"},{"location":"#welcome-to-botright","text":"For full documentation of changes visit BotrightDocumentation . Except of these changes, you can use Botright after the PlaywrightDocs","title":"Welcome to Botright!"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pip","text":"pip install --upgrade pip pip install botright playwright install","title":"Pip"},{"location":"#usage","text":"Once installed, you can import Botright in a Python script, and launch a firefox browser. import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() await page.goto(\"http://playwright.dev\") print(await page.title()) await botright_client.close() if __name__ == \"__main__\": asyncio.run(main())","title":"Usage"},{"location":"#first-script","text":"In our first script, we will navigate to whatsmyuseragent.org and take a screenshot in WebKit. import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() page.goto(\"http://whatsmyuseragent.org/\") page.screenshot(path=\"example.png\") await botright_client.close() if __name__ == \"__main__\": asyncio.run(main()) By default, Botright runs the browsers in headless mode. To see the browser UI, pass the headless=False flag while launching botright/the browser. await botright.Botright(headless=False)","title":"First script"},{"location":"#interactive-mode-repl","text":"You can launch the interactive python REPL: python -m asyncio and then launch Botright within it for quick experimentation: >>> import botright >>> botright_client = await botright.Botright() # Pass headless=False to botright.Botright() to see the browser UI >>> browser = await botright_client.new_browser() >>> page = await browser.new_page() >>> await page.goto(\"http://whatsmyuseragent.org/\") >>> await page.screenshot(path=\"example.png\") >>> await botright_client.stop()","title":"Interactive mode (REPL)"},{"location":"#pyinstaller","text":"You can use Botright with Pyinstaller to create standalone executables. # main.py import asyncio import botright async def main(): botright_client = await botright.Botright() browser = await botright_client.new_browser() page = await browser.new_page() page.goto(\"http://whatsmyuseragent.org/\") page.screenshot(path=\"example.png\") await botright_client.close() if __name__ == \"__main__\": asyncio.run(main()) If you want to bundle browsers with the executables: PLAYWRIGHT_BROWSERS_PATH=0 playwright install firefox pyinstaller -F main.py set PLAYWRIGHT_BROWSERS_PATH=0 playwright install firefox pyinstaller -F main.py $env:PLAYWRIGHT_BROWSERS_PATH=\"0\" playwright install firefox pyinstaller -F main.py","title":"Pyinstaller"},{"location":"#known-issues","text":"","title":"Known issues"},{"location":"#threading","text":"Botright's API is not thread-safe. If you are using Botright in a multi-threaded environment, you should create a botright instance per thread. See threading issue for more details.","title":"Threading"},{"location":"botright/","text":"Initialization Botright await botright.Botright() Initialize a Botright Session Kwargs Usage headless (bool) Whether to run browser in headless mode. Defaults to False returns: BotrightObject NewBrowser await botright_client.new_browser() Spawns a new Browser Kwargs Usage proxy (str) Used to pass a ProxyServer-Address. Example: username:password@ip:port . Defaults to None locale (str) Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Affects Captcha Language. Defaults to en-US useragent (str) Specific user agent. Defaults to FakerUseragent geolocation (dict) Specify the Browsers Geolocation. See GeolocationDocs . Defaults to ProxyGeoLocation timezone_id (str) Specify the Browsers Timezone. Defaults to ProxyTimezoneID screen (dict) Specify the Browsers Screen Resolution. See ScreenDocs . Defaults to FakerScreenResolution viewport (dict) Specify the Browsers Viewport Resolution. See ViewportDocs . Defaults to FakerViewportResolution proxy (dict) Specify the Browser Proxy. See ProxyDocs . Defaults to ProxyManagerBrowserProxy http_credentials (dict) Specify the Browser Proxy Credentials. See HttpCredentialsDocs . Defaults to ProxyManagerUsername & ProxyManagerPassword **PlaywrightContextArgs See ContextDocs for further possible Arguments. Defaults to None returns: PlaywrightContext Get hCaptcha Key with Sitekey & rqData await browser.get_hcaptcha() Spawns a new Page and Solves Captcha Kwargs Usage sitekey (str) Specify the Sitekey to solve the Captcha with. Defaults to 00000000-0000-0000-0000-000000000000 rqdata (str) Specify rqData to mock the Captcha with. Defaults to None returns: hCaptchaKey Solve hCaptcha await page.solve_hcaptcha() Spawns a new Page Kwargs Usage rqdata (str) Specify rqData to mock the Captcha with. Defaults to None returns: hCaptchaKey","title":"Botright"},{"location":"botright/#initialization","text":"","title":"Initialization"},{"location":"botright/#botright","text":"await botright.Botright() Initialize a Botright Session Kwargs Usage headless (bool) Whether to run browser in headless mode. Defaults to False returns: BotrightObject","title":"Botright"},{"location":"botright/#newbrowser","text":"await botright_client.new_browser() Spawns a new Browser Kwargs Usage proxy (str) Used to pass a ProxyServer-Address. Example: username:password@ip:port . Defaults to None locale (str) Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. Affects Captcha Language. Defaults to en-US useragent (str) Specific user agent. Defaults to FakerUseragent geolocation (dict) Specify the Browsers Geolocation. See GeolocationDocs . Defaults to ProxyGeoLocation timezone_id (str) Specify the Browsers Timezone. Defaults to ProxyTimezoneID screen (dict) Specify the Browsers Screen Resolution. See ScreenDocs . Defaults to FakerScreenResolution viewport (dict) Specify the Browsers Viewport Resolution. See ViewportDocs . Defaults to FakerViewportResolution proxy (dict) Specify the Browser Proxy. See ProxyDocs . Defaults to ProxyManagerBrowserProxy http_credentials (dict) Specify the Browser Proxy Credentials. See HttpCredentialsDocs . Defaults to ProxyManagerUsername & ProxyManagerPassword **PlaywrightContextArgs See ContextDocs for further possible Arguments. Defaults to None returns: PlaywrightContext","title":"NewBrowser"},{"location":"botright/#get-hcaptcha-key-with-sitekey-rqdata","text":"await browser.get_hcaptcha() Spawns a new Page and Solves Captcha Kwargs Usage sitekey (str) Specify the Sitekey to solve the Captcha with. Defaults to 00000000-0000-0000-0000-000000000000 rqdata (str) Specify rqData to mock the Captcha with. Defaults to None returns: hCaptchaKey","title":"Get hCaptcha Key with Sitekey &amp; rqData"},{"location":"botright/#solve-hcaptcha","text":"await page.solve_hcaptcha() Spawns a new Page Kwargs Usage rqdata (str) Specify rqData to mock the Captcha with. Defaults to None returns: hCaptchaKey","title":"Solve hCaptcha"}]}